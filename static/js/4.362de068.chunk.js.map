{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","styles","dialog","active","name","Message","message","Textarea","Element","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","areaAddMessage","onSubmit","handleSubmit","Field","component","validate","required","placeholder","DialogsContainer","compose","dialogsPage","dispatch","addMessage","newMessageText","dialogsElements","dialogs","map","messagesElements","messages","dialogsItem","formData","console","log"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,eAAiB,kC,oHCQrPC,EAAkB,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAWhC,OAFuCC,YAAQN,EAARM,EARb,SAACC,GAA8B,IAChDL,EAAwBK,EAAxBL,OAAWM,EADoC,YACvBD,EADuB,YAEpD,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAFX,cAAC,IAAD,CAAUC,GAAI,gB,8ICZpBC,EAAuC,SAACH,GACjD,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OACI,qBAAKC,UAAWC,IAAOC,OAAS,IAAMD,IAAOE,OAA7C,SACI,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCNzBC,EAAiC,SAACX,GAC3C,OACI,qBAAKM,UAAWC,IAAOK,QAAvB,SAAiCZ,EAAMY,W,kCC2CzCC,EAAWC,YAAQ,YAEnBC,EAAcC,YAAiB,IAkB/BC,EAAsBC,YAAmC,CAACC,KAAM,kBAA1CD,EAhBiD,SAAClB,GAC1E,OACI,uBAAMM,UAAWC,IAAOa,eAAgBC,SAAUrB,EAAMsB,aAAxD,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWX,EACXH,KAAM,iBACNe,SAAU,CAACC,IAAUX,GACrBY,YAAa,oBAExB,8BACI,iD,wBCtCHC,EAAmBC,YAC5B9B,aAlBkB,SAACL,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,YACnBnC,OAAQD,EAAME,KAAKD,WAIF,SAACoC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASC,YAAWC,SAS5BpC,IAF4BgC,EDAgB,SAAC7B,GAE7C,IAAIkC,EAAkBlC,EAAM8B,YAAYK,QAAQC,KAAI,SAAAD,GAAO,OAAI,cAAC,EAAD,CAAYzB,KAAMyB,EAAQzB,KAAML,GAAI8B,EAAQ9B,QAEvGgC,EAAmBrC,EAAM8B,YAAYQ,SAASF,KAAI,SAAAxB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,aAO3F,OACI,sBAAKN,UAAWC,IAAO4B,QAAvB,UACI,qBAAK7B,UAAWC,IAAOgC,YAAvB,SACKL,IAEL,qBAAK5B,UAAWC,IAAO+B,SAAvB,SACKD,IAEL,cAACpB,EAAD,CAAqBI,SAbP,SAACmB,GACnBC,QAAQC,IAAIF,EAASP,gBACrBjC,EAAMgC,WAAWQ,EAASP","file":"static/js/4.362de068.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2luZj\",\"dialogsItem\":\"Dialogs_dialogsItem__2m87p\",\"active\":\"Dialogs_active__TJLPN\",\"dialog\":\"Dialogs_dialog__1zmBB\",\"messages\":\"Dialogs_messages__1AcB5\",\"message\":\"Dialogs_message__11jSW\",\"areaAddMessage\":\"Dialogs_areaAddMessage__2GyMW\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to={\"/login\"}/>\r\n        }\r\n        return <Component {...restProps as T} />;\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../redux/dialogs-reducer\";\r\n\r\nexport const DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nexport const Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItemType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Element} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsMessagePropsType = {\r\n    dialogs: Array<DialogItemType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\ntype dataPropsType = {\r\n    dialogsPage: DialogsMessagePropsType\r\n    isAuth: boolean\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\ntype dataAddMessagePropsType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Dialogs: React.FC<dataPropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialogs => <DialogItem name={dialogs.name} id={dialogs.id}/>)\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(message => <Message message={message.message} />)\r\n\r\n    const addNewMessage = (formData: dataAddMessagePropsType) => {\r\n        console.log(formData.newMessageText)\r\n        props.addMessage(formData.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Textarea = Element(\"textarea\")\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<dataAddMessagePropsType>> = (props) => {\r\n    return(\r\n        <form className={styles.areaAddMessage} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newMessageText\"}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={\"Enter message\"} />\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<dataAddMessagePropsType>({form: 'addMessageForm'})(AddMessageForm)\r\n","import React from \"react\";\r\nimport {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(addMessage(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\n// export const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs))\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}