{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Description/Description.module.css","components/Description/Posts/Posts.module.css","components/Description/Posts/Post/Post.module.css","components/Description/ProfileInfo/ProfileStatusWithHooks.tsx","components/Description/ProfileInfo/ProfileDataForm.tsx","components/Description/ProfileInfo/ProfileInfo.tsx","components/Description/Posts/Post/Post.tsx","components/Description/Posts/Posts.tsx","components/Description/Posts/PostsContainer.tsx","components/Description/Description.tsx","components/Description/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEdtMode","status","setStatus","useEffect","onDoubleClick","type","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","Input","Element","TextArea","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","Field","placeholder","name","validate","required","component","Object","keys","contacts","map","key","className","styles","contact","stylesForm","formSummaryError","ProfileInfo","profileUser","Preloader","description","descriptionText","fullName","src","photos","large","userImg","alt","isOwner","e","target","files","length","savePhoto","initialValues","formData","console","log","saveProfile","setEditMode","ContactInfo","contactKey","contactInfo","ProfileBlock","onClick","aboutMe","checked","lookingForAJob","disabled","lookingForAJobDescription","Post","post","title","likesCount","Posts","React","memo","postsElements","posts","id","AddPostReduxForm","values","addPost","newPostText","Textarea","maxLength20","maxLengthCreator","PostsContainer","profilePage","dispatch","Description","setProfilePhoto","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfileUser","getUserStatus","refreshProfile","prevProps","prevState","snapshot","updateUserStatus","setProfile","ProfileUserContainer","compose","data","withRouter"],"mappings":"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","file":"static/js/3.f9b85efc.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to={\"/login\"}/>\r\n        }\r\n        return <Component {...restProps as T} />;\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Description_description__2EoJ-\",\"descriptionText\":\"Description_descriptionText__3V31Z\",\"contact\":\"Description_contact__-Hddk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__167O5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1Akat\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEdtMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEdiMode = () => {\r\n        setEdtMode(true)\r\n    }\r\n\r\n    const deactivateEdiMode = () => {\r\n        setEdtMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEdiMode}>{status ? status : '----'}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input type=\"text\" onChange={onStatusChange} autoFocus={true} value={status}\r\n                           onBlur={deactivateEdiMode}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Element} from \"../../common/FormControls/FormControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport stylesForm from \"../../common/FormControls/FormControls.module.css\"\r\nimport styles from \"../Description.module.css\";\r\nimport {ProfileUserType} from \"../../../redux/profile-reducer\";\r\n\r\ntype FormDataType = {\r\n    profile: ProfileUserType\r\n}\r\n\r\nconst Input = Element(\"input\")\r\nconst TextArea = Element(\"textarea\")\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileUserType, FormDataType> & FormDataType> = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Name\"} name={\"fullName\"} validate={[required]} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"About me\"} name={\"aboutMe\"} component={TextArea}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"lookingForAJob\"} component={\"input\"}/> Looking for a job\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"My professional skills\"} name={\"lookingForAJobDescription\"} component={TextArea}/>\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={styles.contact}>\r\n                        <b>{key}: </b><Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\r\n                    </div>\r\n            })}\r\n            </div>\r\n            {error && <div className={stylesForm.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileUserType, FormDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from \"../Description.module.css\";\r\nimport {ContactsUserType, ProfileUserType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userImg from \"../../../img/user.jpg\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype dataPropsType = {\r\n    profileUser: ProfileUserType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileUserType) => void\r\n}\r\n\r\nexport function ProfileInfo(props: dataPropsType) {\r\n    const [editMode, setEdtMode] = useState(false)\r\n\r\n    if (!props.profileUser) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onProfilePhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileUserType) => {\r\n        console.log(formData)\r\n        props.saveProfile(formData)\r\n        setEdtMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.description}>\r\n            </div>\r\n            <div className={styles.descriptionText}>\r\n                <h2>{props.profileUser.fullName}</h2>\r\n                <img src={props.profileUser.photos?.large || userImg} alt={\"ava\"}/>\r\n                {props.isOwner && <input type={'file'} onChange={onProfilePhotoSelected} />}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                {!editMode ? <ProfileBlock profileUser={props.profileUser} isOwner={props.isOwner} setEditMode={setEdtMode} /> : <ProfileDataFormReduxForm initialValues={props.profileUser} profile={props.profileUser} onSubmit={onSubmit} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactInfoTypeProps = {\r\n    contactKey: string\r\n    contactInfo: string | null\r\n}\r\n\r\nconst ContactInfo: React.FC<ContactInfoTypeProps> = (props) => {\r\n    return <div className={styles.contact}><b>{props.contactKey}: </b>{props.contactInfo}</div>\r\n}\r\n\r\nconst ProfileBlock = (props: {profileUser: ProfileUserType, isOwner: boolean, setEditMode: (editMode: boolean) => void}) => {\r\n    return(\r\n        <>\r\n            {props.isOwner && <button onClick={() => props.setEditMode(true)}>Edit</button>}\r\n            <div>\r\n                <b>About me: </b>\r\n                {props.profileUser.aboutMe}\r\n            </div>\r\n            {props.profileUser.contacts && <div>{Object.keys(props.profileUser.contacts).map(key => {\r\n                return <ContactInfo key={key} contactKey={key} contactInfo={props.profileUser.contacts[key as keyof ContactsUserType]}/>\r\n            })}</div>}\r\n            <div>\r\n                <span><b>{\"Looking for a job: \"}</b></span>\r\n                <input type={\"checkbox\"} checked={props.profileUser.lookingForAJob} disabled={true}/>\r\n                <div>{props.profileUser.lookingForAJobDescription}</div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\nexport const Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={styles.post}>\r\n            <div>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPSP8oOxLZy-bSFwd2sDoNmAEB4MNILAKPHA&usqp=CAU\" alt=\"ava\" />\r\n                {props.title}\r\n            </div>\r\n            <span>\r\n                {props.likesCount} likes\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./Posts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Element} from \"../../common/FormControls/FormControls\";\r\n\r\ntype postsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype dataAddPostPropsType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const Posts: React.FC<postsPropsType> = React.memo((props) => {\r\n    let postsElements = props.posts.map(post => <Post key={post.id} title={post.title}\r\n                                                      likesCount={post.likesCount}/>)\r\n\r\n    let addNewPost = (values: dataAddPostPropsType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.posts}>\r\n            <AddPostReduxForm onSubmit={addNewPost} />\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst Textarea = Element(\"textarea\")\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<dataAddPostPropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       validate={[required, maxLength20]}\r\n                       placeholder={\"Enter post\"}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<dataAddPostPropsType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost} from \"../../../redux/profile-reducer\";\r\nimport {Posts} from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)","import React from \"react\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\r\nimport {PostsContainer} from \"./Posts/PostsContainer\";\r\nimport {ProfileUserType} from \"../../redux/profile-reducer\";\r\n\r\ntype dataPropsType = {\r\n    profileUser: ProfileUserType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfilePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileUserType) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Description: React.FC<dataPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profileUser={props.profileUser} status={props.status} updateStatus={props.updateStatus} savePhoto={props.setProfilePhoto} saveProfile={props.saveProfile} isOwner={props.isOwner} />\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileUser,\r\n    getUserStatus,\r\n    ProfileUserType, setProfile,\r\n    setProfilePhoto,\r\n    updateUserStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {Description} from \"./Description\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStatePropsType = {\r\n    profileUser: ProfileUserType | null\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    getProfileUser: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    setProfilePhoto: (photo: File) => void\r\n    setProfile: (profile: ProfileUserType) => void\r\n}\r\n\r\ntype ownPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type dataPropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\nclass ProfileContainer extends React.Component<dataPropsType, AppStateType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId.toString()\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileUser(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<dataPropsType>, prevState: Readonly<AppStateType>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Description profileUser={this.props.profileUser}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateUserStatus}\r\n                         setProfilePhoto={this.props.setProfilePhoto}\r\n                         saveProfile={this.props.setProfile}\r\n                         isOwner={!this.props.match.params.userId} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        profileUser: state.profilePage.profileUser,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const ProfileUserContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileUser, getUserStatus, updateUserStatus, setProfilePhoto, setProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}